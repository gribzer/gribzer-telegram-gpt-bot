# app/telegram_bot/handlers/menu.py

import logging
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputMediaPhoto
)
from telegram.ext import ContextTypes

from app.services.user_service import get_active_chat_id, get_user_model
from app.services.chat_service import get_user_chats, get_chat_title

logger = logging.getLogger(__name__)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–ª–æ–∂–∫–æ–π Start_cover.png
    """
    cover_path = "app/telegram_bot/images/Start_cover.png"
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π Proxy API –¥–ª—è ChatGPT.\n"
        "–ù–∞–∂–º–∏—Ç–µ /menu, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.\n"
        "–õ–∏–±–æ –æ—Ç–∫—Ä–æ–π—Ç–µ –º–µ–Ω—é –±–æ—Ç–∞ (—Å–∏–Ω—è—è –∫–Ω–æ–ø–∫–∞ —Å–ª–µ–≤–∞ –æ—Ç –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞)."
    )

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–±—Ä–∞–ª /start)
    if update.message:
        with open(cover_path, "rb") as photo:
            await update.message.reply_photo(
                photo=photo,
                caption=text
            )
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ callback_query (—Ä–µ–¥–∫–æ –¥–ª—è /start)
        query = update.callback_query
        await query.answer()
        media = InputMediaPhoto(open(cover_path, "rb"), caption=text)
        await query.edit_message_media(media=media)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /help - –í—ã—Å—ã–ª–∞–µ–º Help.png –∏ —Ç–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏.
    """
    cover_path = "app/telegram_bot/images/Help.png"
    text = (
        "‚ùì –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äì –±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç.\n"
        "2. /menu ‚Äì –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —á–∞—Ç–∞–º–∏, –º–æ–¥–µ–ª—è–º–∏ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏.\n"
        "3. /help ‚Äì —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞.\n"
        "4. /cabinet ‚Äì –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.\n"
        "5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é —Å–ª–µ–≤–∞ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞."
    )

    if update.message:
        with open(cover_path, "rb") as photo:
            await update.message.reply_photo(photo=photo, caption=text)
    else:
        query = update.callback_query
        await query.answer()
        media = InputMediaPhoto(open(cover_path, "rb"), caption=text)
        await query.edit_message_media(media=media)


async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /menu ‚Äì –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (Menu.png + —Ç–µ–∫—Å—Ç + –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏).
    –ü—Ä–∏ –∫–æ–ª–±—ç–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ edit_message_media.
    """
    cover_path = "app/telegram_bot/images/Menu.png"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id
    if update.message:
        chat_id = update.message.chat.id
    else:
        chat_id = update.callback_query.message.chat.id

    session_factory = context.application.bot_data.get("session_factory")
    if not session_factory:
        logger.error("No session_factory found in bot_data.")
        main_text = (
            "–û—à–∏–±–∫–∞: –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:"
        )
        keyboard = [
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")],
            [InlineKeyboardButton("üè¶ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="show_cabinet")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
    else:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–∑ –ë–î –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        async with session_factory() as session:
            active_id = await get_active_chat_id(session, chat_id)
            model_name = await get_user_model(session, chat_id) or "‚Äî"
            user_chats = await get_user_chats(session, chat_id)
            total_chats = len(user_chats)

            if active_id:
                active_title = await get_chat_title(session, active_id) or f"(ID {active_id})"
            else:
                active_title = "–Ω–µ –≤—ã–±—Ä–∞–Ω"

        main_text = (
            f"–¢–µ–∫—É—â–∏–π —á–∞—Ç: {active_title}\n"
            f"–ú–æ–¥–µ–ª—å: {model_name}\n"
            f"–í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {total_chats}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:"
        )
        keyboard = [
            [
                InlineKeyboardButton("üìë –í—Å–µ —á–∞—Ç—ã", callback_data="all_chats"),
                InlineKeyboardButton("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="favorite_chats"),
            ],
            [
                InlineKeyboardButton("ü§ñ –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å", callback_data="change_model"),
                InlineKeyboardButton("üí¨ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞", callback_data="history_current_chat"),
            ],
            [
                InlineKeyboardButton("üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data="update_instructions"),
                InlineKeyboardButton("üè¶ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="show_cabinet"),
            ],
            [
                InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

    # –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∏–∏ (caption)
    caption_text = main_text

    if update.message:
        # –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (/menu)
        with open(cover_path, "rb") as photo:
            await update.message.reply_photo(
                photo=photo,
                caption=caption_text,
                reply_markup=reply_markup
            )
    else:
        # –ö–æ–ª–±—ç–∫: —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ñ–æ—Ç–æ + –ø–æ–¥–ø–∏—Å—å
        query = update.callback_query
        await query.answer()
        media = InputMediaPhoto(open(cover_path, "rb"), caption=caption_text)
        await query.edit_message_media(
            media=media,
            reply_markup=reply_markup
        )
