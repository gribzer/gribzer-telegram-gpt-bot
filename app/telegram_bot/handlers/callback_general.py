# app/telegram_bot/handlers/callback_general.py

import logging
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputMediaPhoto
)
from telegram.ext import ContextTypes, ConversationHandler

# –°–µ—Ä–≤–∏—Å—ã user_service –∏ chat_service
from app.services.user_service import (
    get_user_instructions,
    set_user_instructions,
    set_user_model,
    get_user_model,
    get_active_chat_id,
    set_active_chat_id
)
from app.services.chat_service import (
    delete_chat,
    set_chat_favorite
)

# –ò–º–ø–æ—Ä—Ç —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
from app.telegram_bot.handlers.menu import menu_command
from app.telegram_bot.handlers.chats import (
    show_all_chats_list,
    show_favorite_chats_list,
    show_single_chat_menu,
    show_chat_history
)
from app.telegram_bot.handlers.conversation import (
    rename_chat_entry,
    new_chat_entry,
    instructions_add_entry,
    instructions_edit_entry
)

# –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ ConversationHandler, –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:
from app.config import (
    SET_INSTRUCTIONS,
    SET_NEW_CHAT_TITLE,
    SET_RENAME_CHAT
)

logger = logging.getLogger(__name__)

# –û–¥–Ω–∞ –æ–±–ª–æ–∂–∫–∞ ¬´–Ω–∞ –≤—Å–µ —Å–ª—É—á–∞–∏¬ª –≤ —ç—Ç–æ–º –º–æ–¥—É–ª–µ (–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)
CALLBACK_COVER = "app/telegram_bot/images/Chats.png"


async def instructions_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç "–ú–µ–Ω—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π": —Ç–µ–∫—É—â–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –∫–Ω–æ–ø–∫–∏ "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å / —É–¥–∞–ª–∏—Ç—å / –¥–æ–±–∞–≤–∏—Ç—å".
    """
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat.id

    session_factory = context.application.bot_data.get("session_factory")
    if not session_factory:
        logger.error("No session_factory found. Can't load instructions.")
        text = "–û—à–∏–±–∫–∞: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î."
        media = InputMediaPhoto(open(CALLBACK_COVER, "rb"), caption=text)
        await query.edit_message_media(media=media)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–∑ –ë–î
    async with session_factory() as session:
        current_instructions = await get_user_instructions(session, chat_id)
        current_instructions = current_instructions or ""
    is_empty = not current_instructions.strip()

    if is_empty:
        text = "–¢–µ–∫—É—â–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: (–ø—É—Å—Ç–æ)"
        keyboard = [[InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data="instructions_add")]]
    else:
        text = f"–¢–µ–∫—É—â–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n\n{current_instructions}"
        keyboard = [[
            InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data="instructions_edit"),
            InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data="instructions_delete")
        ]]

    keyboard.append([InlineKeyboardButton("–í –º–µ–Ω—é", callback_data="back_to_menu")])
    media = InputMediaPhoto(open(CALLBACK_COVER, "rb"), caption=text)
    await query.edit_message_media(
        media=media,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def instructions_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ (–æ—á–∏—Å—Ç–∫–∞) –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat.id

    session_factory = context.application.bot_data.get("session_factory")
    if not session_factory:
        logger.error("No session_factory found. Can't delete instructions.")
        text = "–û—à–∏–±–∫–∞: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î."
        media = InputMediaPhoto(open(CALLBACK_COVER, "rb"), caption=text)
        await query.edit_message_media(media=media)
        return

    async with session_factory() as session:
        await set_user_instructions(session, chat_id, "")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π —Å–Ω–æ–≤–∞
    # –ú–æ–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –≤—ã–≤–µ—Å—Ç–∏ ¬´–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã¬ª, –∑–∞—Ç–µ–º —Å–Ω–æ–≤–∞ –º–µ–Ω—é, –Ω–æ
    # –ø—Ä–æ—â–µ —Å—Ä–∞–∑—É –≤–µ—Ä–Ω—É—Ç—å –≤ instructions_menu (–∫–æ—Ç–æ—Ä–∞—è —Å–∞–º–∞ –≤—ã–≤–µ–¥–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
    await query.answer("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã.")
    await instructions_menu(update, context)


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_data –¥–ª—è —Ç–µ—Ö —Å–ª—É—á–∞–µ–≤,
    –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–ø–∞–¥–∞—é—Ç –≤ cabinet_callback_handler –∏ —Ç. –¥.
    """
    query = update.callback_query
    data = query.data
    await query.answer()

    if data == "back_to_menu":
        await menu_command(update, context)
        return

    elif data == "all_chats":
        await show_all_chats_list(update, context)
        return

    elif data == "favorite_chats":
        await show_favorite_chats_list(update, context)
        return

    elif data == "new_chat":
        return await new_chat_entry(update, context)

    elif data == "change_model":
        # –ó–∞—Ä–∞–Ω–µ–µ –∑–∞–¥–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
        predefined_models = ["gpt-4o", "o1", "o3-mini"]
        keyboard = [[InlineKeyboardButton(model, callback_data=f"model_{model}")] for model in predefined_models]
        keyboard.append([InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_menu")])

        text = "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:"
        media = InputMediaPhoto(open(CALLBACK_COVER, "rb"), caption=text)
        await query.edit_message_media(
            media=media,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    elif data.startswith("model_"):
        session_factory = context.application.bot_data.get("session_factory")
        if not session_factory:
            logger.error("No session_factory found. Can't set model.")
            text = "–û—à–∏–±–∫–∞: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î."
            media = InputMediaPhoto(open(CALLBACK_COVER, "rb"), caption=text)
            await query.edit_message_media(media=media)
            return

        selected_model = data.split("_", 1)[1]
        chat_id = query.message.chat.id

        async with session_factory() as session:
            await set_user_model(session, chat_id, selected_model)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
        await menu_command(update, context)
        return

    elif data == "update_instructions":
        return await instructions_menu(update, context)

    elif data == "instructions_add":
        return await instructions_add_entry(update, context)

    elif data == "instructions_edit":
        return await instructions_edit_entry(update, context)

    elif data == "instructions_delete":
        return await instructions_delete(update, context)

    elif data == "help":
        text = (
            "‚ùì –ü–æ–º–æ—â—å:\n"
            "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äì –±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç.\n"
            "2. ¬´–í—Å–µ —á–∞—Ç—ã¬ª ‚Äì —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—à–∏—Ö —á–∞—Ç–æ–≤.\n"
            "3. ¬´–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Ç—ã¬ª ‚Äì —Ç–æ–ª—å–∫–æ ‚≠ê.\n"
            "4. ¬´–°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å¬ª ‚Äì –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ GPT-–º–æ–¥–µ–ª–∏.\n"
            "5. ¬´–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏¬ª ‚Äì –∑–∞–¥–∞—Ç—å/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å/—É–¥–∞–ª–∏—Ç—å –æ–±—â–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.\n"
            "6. ¬´–ò—Å—Ç–æ—Ä–∏—è¬ª ‚Äì –ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞.\n"
        )
        keyboard = [[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_menu")]]
        media = InputMediaPhoto(open(CALLBACK_COVER, "rb"), caption=text)
        await query.edit_message_media(media=media, reply_markup=InlineKeyboardMarkup(keyboard))
        return

    elif data == "history_current_chat":
        session_factory = context.application.bot_data.get("session_factory")
        if not session_factory:
            logger.error("No session_factory found. Can't get active chat.")
            text = "–û—à–∏–±–∫–∞: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î."
            media = InputMediaPhoto(open(CALLBACK_COVER, "rb"), caption=text)
            await query.edit_message_media(media=media)
            return

        user_id = query.message.chat.id
        async with session_factory() as session:
            active_id = await get_active_chat_id(session, user_id)
        if active_id:
            await show_chat_history(update, context, active_id, page=0)
        else:
            text = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞. –°–æ–∑–¥–∞–π—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç."
            keyboard = [[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_menu")]]
            media = InputMediaPhoto(open(CALLBACK_COVER, "rb"), caption=text)
            await query.edit_message_media(media=media, reply_markup=InlineKeyboardMarkup(keyboard))
        return

    elif data.startswith("open_chat_"):
        chat_db_id = int(data.split("_")[-1])
        await show_single_chat_menu(update, context, chat_db_id)
        return

    elif data.startswith("set_active_"):
        session_factory = context.application.bot_data.get("session_factory")
        if not session_factory:
            logger.error("No session_factory found. Can't set active chat.")
            text = "–û—à–∏–±–∫–∞: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î."
            media = InputMediaPhoto(open(CALLBACK_COVER, "rb"), caption=text)
            await query.edit_message_media(media=media)
            return

        chat_db_id = int(data.split("_")[-1])
        user_id = query.message.chat.id
        async with session_factory() as session:
            await set_active_chat_id(session, user_id, chat_db_id)

        text = f"–ß–∞—Ç {chat_db_id} —Ç–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–µ–Ω."
        keyboard = [[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_menu")]]
        media = InputMediaPhoto(open(CALLBACK_COVER, "rb"), caption=text)
        await query.edit_message_media(
            media=media,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    elif data.startswith("rename_"):
        return await rename_chat_entry(update, context)

    elif data.startswith("delete_chat_"):
        session_factory = context.application.bot_data.get("session_factory")
        if not session_factory:
            logger.error("No session_factory found. Can't delete chat.")
            text = "–û—à–∏–±–∫–∞: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î."
            media = InputMediaPhoto(open(CALLBACK_COVER, "rb"), caption=text)
            await query.edit_message_media(media=media)
            return

        chat_db_id = int(data.split("_")[-1])
        user_id = query.message.chat.id
        async with session_factory() as session:
            active_id = await get_active_chat_id(session, user_id)
            if active_id == chat_db_id:
                await set_active_chat_id(session, user_id, None)
            await delete_chat(session, chat_db_id)

        text = f"–ß–∞—Ç {chat_db_id} —É–¥–∞–ª—ë–Ω."
        keyboard = [[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_menu")]]
        media = InputMediaPhoto(open(CALLBACK_COVER, "rb"), caption=text)
        await query.edit_message_media(media=media, reply_markup=InlineKeyboardMarkup(keyboard))
        return

    elif data.startswith("fav_"):
        session_factory = context.application.bot_data.get("session_factory")
        if not session_factory:
            logger.error("No session_factory found. Can't favorite chat.")
            text = "–û—à–∏–±–∫–∞: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î."
            media = InputMediaPhoto(open(CALLBACK_COVER, "rb"), caption=text)
            await query.edit_message_media(media=media)
            return

        chat_db_id = int(data.split("_")[-1])
        async with session_factory() as session:
            await set_chat_favorite(session, chat_db_id, True)

        await show_single_chat_menu(update, context, chat_db_id)
        return

    elif data.startswith("unfav_"):
        session_factory = context.application.bot_data.get("session_factory")
        if not session_factory:
            logger.error("No session_factory found. Can't unfavorite chat.")
            text = "–û—à–∏–±–∫–∞: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î."
            media = InputMediaPhoto(open(CALLBACK_COVER, "rb"), caption=text)
            await query.edit_message_media(media=media)
            return

        chat_db_id = int(data.split("_")[-1])
        async with session_factory() as session:
            await set_chat_favorite(session, chat_db_id, False)

        await show_single_chat_menu(update, context, chat_db_id)
        return

    elif data.startswith("history_"):
        # history_<chat_id>:page_<N>
        parts = data.split(":")
        chat_part = parts[0].split("_")[-1]
        chat_db_id = int(chat_part)
        page = 0
        if len(parts) > 1 and parts[1].startswith("page_"):
            page = int(parts[1].split("_")[-1])
        await show_chat_history(update, context, chat_db_id, page)
        return

    # –ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ ‚Äî –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞."
    keyboard = [[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_menu")]]
    media = InputMediaPhoto(open(CALLBACK_COVER, "rb"), caption=text)
    await query.edit_message_media(
        media=media,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ConversationHandler.END
