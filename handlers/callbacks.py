# handlers/callbacks.py
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler

from db import (
    get_user_instructions,
    set_user_instructions,
    set_user_model,
    get_user_model,
    get_active_chat_id,
    set_active_chat_id,
    delete_chat,
    set_chat_favorite
)
from handlers.menu import menu_command
from handlers.chats import (
    show_all_chats_list,
    show_favorite_chats_list,
    show_single_chat_menu,
    show_chat_history
)
from handlers.conversation import (
    rename_chat_entry,
    new_chat_entry,
    receive_instructions,           # <-- –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
    instructions_add_entry,         # <-- –ù–æ–≤—ã–π –º–µ—Ç–æ–¥
    instructions_edit_entry
)
from config import (
    SET_INSTRUCTIONS,
    SET_NEW_CHAT_TITLE,
    SET_RENAME_CHAT,
    AVAILABLE_MODELS
)

logger = logging.getLogger(__name__)


# --------------------------------------------------------------------------------
#  –ú–ò–ù–ò-–ú–ï–ù–Æ –ò–ù–°–¢–†–£–ö–¶–ò–ô
# --------------------------------------------------------------------------------
async def instructions_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –∫–Ω–æ–ø–∫–∏ –î–æ–±–∞–≤–∏—Ç—å/–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å/–£–¥–∞–ª–∏—Ç—å
    """
    query = update.callback_query
    chat_id = query.message.chat.id

    current_instructions = get_user_instructions(chat_id) or ""
    is_empty = (not current_instructions.strip())

    if is_empty:
        text = "–¢–µ–∫—É—â–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: (–ø—É—Å—Ç–æ)"
        keyboard = [[InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data="instructions_add")]]
    else:
        text = f"–¢–µ–∫—É—â–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n\n{current_instructions}"
        keyboard = [[InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data="instructions_edit"),
                     InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data="instructions_delete")]]

    # –ö–Ω–æ–ø–∫–∞ "–í –º–µ–Ω—é"
    keyboard.append([InlineKeyboardButton("–í –º–µ–Ω—é", callback_data="back_to_menu")])

    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))


async def instructions_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –£–¥–∞–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (—Å—Ç–∞–≤–∏—Ç "") –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –º–µ–Ω—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    """
    query = update.callback_query
    chat_id = query.message.chat.id

    set_user_instructions(chat_id, "")
    await query.answer("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã.")

    # –°–Ω–æ–≤–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    await instructions_menu(update, context)


# --------------------------------------------------------------------------------
#  –ì–õ–ê–í–ù–´–ô button_handler
# --------------------------------------------------------------------------------
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data

    await query.answer()

    if data == "back_to_menu":
        await menu_command(update, context)
        return

    elif data == "all_chats":
        await show_all_chats_list(update, context)
        return

    elif data == "favorite_chats":
        await show_favorite_chats_list(update, context)
        return

    elif data == "new_chat":
        return await new_chat_entry(update, context)

    elif data == "change_model":
        keyboard = [[InlineKeyboardButton(model, callback_data=f"model_{model}")] for model in AVAILABLE_MODELS]
        keyboard.append([InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_menu")])
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=InlineKeyboardMarkup(keyboard))
        return

    elif data.startswith("model_"):
        selected_model = data.split("_", 1)[1]
        chat_id = query.message.chat.id
        set_user_model(chat_id, selected_model)
        await query.edit_message_text(
            text=f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {selected_model}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_menu")]])
        )
        return

    # --------------------------------
    # –ë–ª–æ–∫ ¬´–ú–µ–Ω—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π¬ª
    # --------------------------------
    elif data == "update_instructions":
        # –í–º–µ—Å—Ç–æ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        return await instructions_menu(update, context)

    elif data == "instructions_add":
        return await instructions_add_entry(update, context)

    elif data == "instructions_edit":
        return await instructions_edit_entry(update, context)

    elif data == "instructions_delete":
        return await instructions_delete(update, context)

    elif data == "help":
        text = (
            "‚ùì –ü–æ–º–æ—â—å:\n"
            "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äì –±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç.\n"
            "2. ¬´–í—Å–µ —á–∞—Ç—ã¬ª ‚Äì —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—à–∏—Ö —á–∞—Ç–æ–≤.\n"
            "3. ¬´–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Ç—ã¬ª ‚Äì —Ç–æ–ª—å–∫–æ ‚≠ê.\n"
            "4. ¬´–°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å¬ª ‚Äì –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ GPT-–º–æ–¥–µ–ª–∏.\n"
            "5. ¬´–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏¬ª ‚Äì –∑–∞–¥–∞—Ç—å / —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å / —É–¥–∞–ª–∏—Ç—å –æ–±—â–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.\n"
        )
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_menu")]])
        )
        return

    # --------------------------------
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏
    # --------------------------------
    elif data.startswith("open_chat_"):
        chat_db_id = int(data.split("_")[-1])
        await show_single_chat_menu(update, context, chat_db_id)
        return

    elif data.startswith("set_active_"):
        chat_db_id = int(data.split("_")[-1])
        user_id = query.message.chat.id
        set_active_chat_id(user_id, chat_db_id)
        await query.edit_message_text(
            text=f"–ß–∞—Ç {chat_db_id} —Ç–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_menu")]])
        )
        return

    elif data.startswith("rename_"):
        return await rename_chat_entry(update, context)

    elif data.startswith("delete_chat_"):
        chat_db_id = int(data.split("_")[-1])
        user_id = query.message.chat.id
        if get_active_chat_id(user_id) == chat_db_id:
            set_active_chat_id(user_id, None)
        delete_chat(chat_db_id)
        await query.edit_message_text(
            text=f"–ß–∞—Ç {chat_db_id} —É–¥–∞–ª—ë–Ω.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_menu")]])
        )
        return

    elif data.startswith("fav_"):
        chat_db_id = int(data.split("_")[-1])
        set_chat_favorite(chat_db_id, True)
        await show_single_chat_menu(update, context, chat_db_id)
        return

    elif data.startswith("unfav_"):
        chat_db_id = int(data.split("_")[-1])
        set_chat_favorite(chat_db_id, False)
        await show_single_chat_menu(update, context, chat_db_id)
        return

    elif data.startswith("history_"):
        # history_<chat_id>:page_<N>
        parts = data.split(":")
        chat_part = parts[0].split("_")[-1]
        chat_db_id = int(chat_part)
        page = 0
        if len(parts) > 1 and parts[1].startswith("page_"):
            page = int(parts[1].split("_")[-1])
        await show_chat_history(update, context, chat_db_id, page)
        return

    # --------------------------------
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ
    # --------------------------------
    await query.edit_message_text(
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_menu")]])
    )
    return ConversationHandler.END
