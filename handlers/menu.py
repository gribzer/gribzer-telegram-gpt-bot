# handlers/menu.py
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from db import (
    get_active_chat_id,
    get_user_model,
    get_user_chats,
    get_chat_title_by_id
)
from config import (
    DEFAULT_INSTRUCTIONS,
    AVAILABLE_MODELS
)


logger = logging.getLogger(__name__)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–ú–µ–Ω—é"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π Proxy API –¥–ª—è ChatGPT.\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ú–µ–Ω—é¬ª, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏."
    )
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ–π –æ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ, –º–æ–¥–µ–ª–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —á–∞—Ç–æ–≤
    chat_id = (update.message.chat.id if update.message else update.callback_query.message.chat.id)
    active_id = get_active_chat_id(chat_id)
    model_name = get_user_model(chat_id) or "‚Äî"
    all_chats = get_user_chats(chat_id)
    total_chats = len(all_chats)

    if active_id:
        active_title = get_chat_title_by_id(active_id) or f"(ID {active_id})"
    else:
        active_title = "–Ω–µ –≤—ã–±—Ä–∞–Ω"

    main_text = (
        f"–¢–µ–∫—É—â–∏–π —á–∞—Ç: {active_title}\n"
        f"–ú–æ–¥–µ–ª—å: {model_name}\n"
        f"–í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {total_chats}\n"
    )

    keyboard = [
        [InlineKeyboardButton("üìë –í—Å–µ —á–∞—Ç—ã", callback_data="all_chats")],
        [InlineKeyboardButton("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Ç—ã", callback_data="favorite_chats")],
        [InlineKeyboardButton("ü§ñ –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å", callback_data="change_model")],
        [InlineKeyboardButton("üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data="update_instructions")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text(main_text, reply_markup=reply_markup)
    else:
        await update.callback_query.edit_message_text(main_text, reply_markup=reply_markup)
